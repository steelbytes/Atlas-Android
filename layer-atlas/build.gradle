//import java.util.regex.Pattern

apply plugin: 'com.android.library'
//apply plugin: 'maven'

apply from: project.file("version.gradle")

ext.pomProjectName = 'Atlas library'
ext.artifactIdName = 'layer-atlas'
group 'com.layer.atlas'

repositories {
    maven { url "https://raw.githubusercontent.com/layerhq/releases-android/master/releases/" }
    //jcenter()
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("lint")
        || task.name.contains("Lint")
        || task.name.contains("test")
        || task.name.contains("Test")
    ) {
        //this is for speed up build
        task.enabled = false
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionName = "${version}"
    }
    dexOptions {
        preDexLibraries true
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}

ext {
    org = "layerhq"
    repo = "Atlas-Android"
    groupFolder = "com/layer/atlas"
}

dependencies {
    //ext.supportVersion = '25.+' // 25.+ is last version that works on gingerbread
    //ext.gmsVersion = '10.0.+' // 10.0.+ is last version that works on gingerbread
    ext.supportVersion = '27.+' //
    ext.gmsVersion = '11.+' // need 10.2.+ for full android 8.0 compat, but let's just go to 11
    ext.firebaseVersion = ext.gmsVersion

    // Android UI
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    // Google Location
    implementation ("com.google.android.gms:play-services-location:$gmsVersion") {
        exclude group: 'com.android.support'
    }

    implementation ("com.google.firebase:firebase-messaging:$firebaseVersion") {
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
    }

    implementation 'org.slf4j:slf4j-nop:1.7.+'

    //noinspection GradleDynamicVersion
    implementation ('com.firebase:firebase-jobdispatcher-with-gcm-dep:0.+') { // used by layer 0.23.14
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
    }

    // Layer SDK
    implementation ('com.layer.sdk:layer-sdk:0.+') { // 23.13 was the last without telemetry which is way too broken
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
        exclude group: 'com.google.firebase'
        exclude group: 'org.slf4j'
        exclude group: 'com.firebase'
    }
    
    // Image cache and loading
    implementation 'com.squareup.picasso:picasso:2.+'

    // Image popup
    implementation ('com.davemorrissey.labs:subsampling-scale-image-view:3.5.+') { // 3.5 until atlas is updated
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
    }
}
/*
def sdkPom() {
    pom {
        project {
            name = pomProjectName
            packaging "aar"
            artifactId = artifactIdName

            developers {
                developer {
                    name 'Amar Srinivasan'
                    email 'amar@layer.com'
                }
                developer {
                    name 'Peter Elliott'
                    email 'peter@layer.com'
                }
            }
        }
    }
}

public String url() {
    return "file://$rootDir/releases"
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task publishAar(type: Upload, description: "Upload android AAR library") {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            repository(url: url())
            pom = sdkPom()
        }
    }
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

// Tasks for publishing a release to GitHub

def getReleaseNotes(version) {
    def capturing = false
    def sb = new StringBuilder();
    new File('./CHANGELOG.md').eachLine { line ->
        if (line ==~ /^\#\#\s${Pattern.quote(version)}$/) {
            capturing = true
        } else if (line ==~ /^\#\#\s[\d\.]+$/) {
            capturing = false
        } else if (capturing) {
            sb.append(line + "\n")
        }
    }

    // Trim and escape backticks
    return sb.toString()
            .trim()
            .replaceAll("`", "\\\\`")
}

def getGitHubToken() {
    return hasProperty('GITHUB_TOKEN') ? GITHUB_TOKEN : "";
}

def getUploadCommand(filename) {
    return "tools/github-release upload " +
            "--security-token ${getGitHubToken()} " +
            "--user $org " +
            "--repo $repo " +
            "--tag $version " +
            "--name $filename " +
            "--file releases/$groupFolder/$artifactIdName/$version/$filename"
}

afterEvaluate { project ->
    // Only add publishing tasks if preconditions are met so this can be used as a submodule
    if (!getGitHubToken().isEmpty() && new File('./CHANGELOG.md').exists()) {
        task uploadReleaseNotes(type: Exec) {
            workingDir "$rootDir"
            commandLine "bash", "-c", "tools/github-release release " +
                    "--security-token ${getGitHubToken()} " +
                    "--user $org " +
                    "--repo $repo " +
                    "--tag $version " +
                    "--description \"${getReleaseNotes("$version")}\""
        }

        task uploadReleaseAar(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}.aar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task uploadReleaseSources(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}-sources.jar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task uploadReleaseJavadoc(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}-javadoc.jar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task publishReleaseToGitHub(dependsOn: [uploadReleaseNotes, uploadReleaseAar, uploadReleaseSources, uploadReleaseJavadoc])
    }
}
*/